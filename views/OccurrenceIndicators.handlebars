<h2>Occurrence Indicators (or Repetition Operators)</h2>

<h2 id="repetition-operators">Repetition Operators</h2>

<p>Another metacharacter is the plus sign <code class="language-plaintext highlighter-rouge">+</code>. The plus sign means
“one or more consecutive instances of the previous expression.” For
example,</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fo+
</code></pre></div></div>

<p>specifies any character string beginning with a lower-case <code class="language-plaintext highlighter-rouge">f</code>
followed by one or more consecutive instances of the small letter
<code class="language-plaintext highlighter-rouge">o</code>. This pattern is present in such strings as <code class="language-plaintext highlighter-rouge">food</code> and <code class="language-plaintext highlighter-rouge">folly</code>,
but not in <code class="language-plaintext highlighter-rouge">front</code> or <code class="language-plaintext highlighter-rouge">flood</code>. The length of the matched string is
variable. In the case of <code class="language-plaintext highlighter-rouge">food</code> the matched string consists of three
characters, whereas in <code class="language-plaintext highlighter-rouge">folly</code> the matched string consists of just
two characters.</p>

<p>The plus sign in our example modifies only the preceding letter
<code class="language-plaintext highlighter-rouge">o</code> — that is, the single letter <code class="language-plaintext highlighter-rouge">o</code> is deemed to be
the <em>previous expression</em> which is affected by the <code class="language-plaintext highlighter-rouge">+</code>. However,
the affected expression need not consist of just a single character.
In regular expressions, parentheses <code class="language-plaintext highlighter-rouge">( )</code> are metacharacters that can
be used to bind several characters into a single unit or sub-expression.
Consider, by way of example, the following regular expression:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(fo)+
</code></pre></div></div>

<p>The parentheses now bind the letters <code class="language-plaintext highlighter-rouge">f</code> and <code class="language-plaintext highlighter-rouge">o</code> into a single
two-character expression, and it is this expression that is now modified
by the plus sign. The regular expression may be read as “one or more
consecutive instances of the string <code class="language-plaintext highlighter-rouge">fo</code>.  This pattern is present
in strings like <code class="language-plaintext highlighter-rouge">food</code> (one instance) and <code class="language-plaintext highlighter-rouge">fofoe</code> (two
instances).</p>

<p>Of course we can mix metacharacters together. The expression:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(.o)+
</code></pre></div></div>

<p>will match strings such as <code class="language-plaintext highlighter-rouge">polo</code> and the first four letters of
<code class="language-plaintext highlighter-rouge">tomorrow</code>.</p>

<p>Several sub-expressions may occur within a single regular expression.
For example, the following regular expression means “one or more
instances of the letter <code class="language-plaintext highlighter-rouge">a</code>, followed by one or more instances of
the string <code class="language-plaintext highlighter-rouge">go</code>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(a)+(go)+
</code></pre></div></div>

<p>This would match character strings in inputs such as <code class="language-plaintext highlighter-rouge">ago</code> and
<code class="language-plaintext highlighter-rouge">agogic</code>, but not in <code class="language-plaintext highlighter-rouge">largo</code> (because of an intervening ‘r’) or <code class="language-plaintext highlighter-rouge">gogo</code>
(no leading <code class="language-plaintext highlighter-rouge">a</code>. Note that the parentheses around the letter
<code class="language-plaintext highlighter-rouge">a</code> can be omitted without changing the sense of the expression.
The following expression mixes the <code class="language-plaintext highlighter-rouge">+</code> repetition operator with the
any-character wildcard <code class="language-plaintext highlighter-rouge">.</code>:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c+.m+
</code></pre></div></div>

<p>This pattern is present in strings such as <code class="language-plaintext highlighter-rouge">accompany</code>,
<code class="language-plaintext highlighter-rouge">accommodate</code>, and <code class="language-plaintext highlighter-rouge">cymbal</code>. This pattern will also match strings
such as <code class="language-plaintext highlighter-rouge">ccm</code> since the second <code class="language-plaintext highlighter-rouge">c</code> can be understood to match
the period metacharacter.</p>

<p>A second repetition operator is the asterisk <code class="language-plaintext highlighter-rouge">*</code>. The asterisk means
“zero or more consecutive instances of the previous expression.”
For example,</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Do\*r
</code></pre></div></div>

<p>specifies any character string beginning with an upper-case <code class="language-plaintext highlighter-rouge">D</code>
followed by zero or more instances of the letter <code class="language-plaintext highlighter-rouge">o</code> followed by
the letter <code class="language-plaintext highlighter-rouge">r</code>. This pattern is present in such strings as <code class="language-plaintext highlighter-rouge">Dorian</code>,
<code class="language-plaintext highlighter-rouge">Doors</code> as well as <code class="language-plaintext highlighter-rouge">Drum</code>, and <code class="language-plaintext highlighter-rouge">Drone</code>. As in the case of the plus
sign, the asterisk modifies only the preceding expression —
in this case the letter <code class="language-plaintext highlighter-rouge">o</code>. Multi-character expressions may be
modified by the asterisk repetition operator by placing the expression
in parentheses. Thus, the regular expression:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ba(na)\*
</code></pre></div></div>

<p>will match strings such as <code class="language-plaintext highlighter-rouge">ba</code>, <code class="language-plaintext highlighter-rouge">bana</code>, <code class="language-plaintext highlighter-rouge">banana</code>, <code class="language-plaintext highlighter-rouge">bananana</code>, etc.</p>

<p>Incidentally, notice that the asterisk metacharacter can be used
to replace the plus sign <code class="language-plaintext highlighter-rouge">+</code> metacharacter. For example, the regular
expression <code class="language-plaintext highlighter-rouge">X+</code> is the same as <code class="language-plaintext highlighter-rouge">XX*</code>. Similarly, <code class="language-plaintext highlighter-rouge">(abc)+</code> is
equivalent to <code class="language-plaintext highlighter-rouge">(abc)(abc)*</code>.</p>

<p>A frequent construction used in regular expressions joins the
wildcard <code class="language-plaintext highlighter-rouge">.</code> with the asterisk repetition character <code class="language-plaintext highlighter-rouge">*</code>. The regular
expression:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.\*
</code></pre></div></div>

<p>means “zero or more instances of any characters.” (Notice the plural
“characters;” this means the repetition need not be of one specific
character.) This expression will match <em>any string</em>, including
nothing at all (the <em>null string</em>). By itself, this expression is
not very useful. However it proves invaluable in combination with
other expressions. For example, the expression:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{.\*}
</code></pre></div></div>

<p>will match any string beginning with a left curly brace and ending
with a right curly brace. If we replaced the curly braces by the
space character, then the resulting regular expression would match
any string of characters separated by spaces — such as printed
words.</p>

<p>A third repetition operator is the question mark <code class="language-plaintext highlighter-rouge">?</code>, which means
“zero or one instance of the preceding expression.” This metacharacter
is frequently useful when you want to specify the presence or absence
of a single expression. For example, the pattern:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ch?o
</code></pre></div></div>

<p>is present in such strings as <code class="language-plaintext highlighter-rouge">Chopin</code> and <code class="language-plaintext highlighter-rouge">Corelli</code> but not <code class="language-plaintext highlighter-rouge">Chinese</code>
or <code class="language-plaintext highlighter-rouge">cornet</code>.</p>

<p>Once again, parentheses can be used to specify more complex
expressions.  The pattern:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ch?(o)+
</code></pre></div></div>

<p>is present in such strings as <code class="language-plaintext highlighter-rouge">Chorale</code>, <code class="language-plaintext highlighter-rouge">Couperin</code>, and <code class="language-plaintext highlighter-rouge">Cooper</code>,
but not in <code class="language-plaintext highlighter-rouge">Chloe</code> or <code class="language-plaintext highlighter-rouge">Chant</code>.</p>

<p>In summary, we’ve identified three metacharacters pertaining to the
number of occurrences of some character or string. The plus sign
means “one or more,” the asterisk means “zero or more,” and the
question mark means “zero or one.” Collectively, these metacharacters
are known as <em>repetition operators</em> since they indicate the number
of times an expression can occur in order to match.</p>