<div class="container text-center body">
  <div class="row align-items-start">

    <tr class="table-primary">

      <div class="col border-5 rounded-top-4 border border-success p-2 mb-2">
      <table class="reference"> <tbody><tr><th>Syntax</th><th>Feature</th></tr> <tr><td>Any character except <tt>[\^$.|?*+()</tt></td><td><a href="characters.html" target="_top">Literal character</a></td></tr> <tr><td><tt>\</tt> followed by any of <tt>[\^$.|?*+(){}</tt></td><td><a href="characters.html#special">Backslash escapes a metacharacter</a></td></tr> <tr><td><tt>.</tt></td><td><a href="dot.html" target="_top">Any character</a></td></tr> <tr><td><tt>|</tt></td><td><a href="alternation.html" target="_top">Alternation</a></td></tr> <tr><td><tt>\|</tt></td><td><a href="alternation.html" target="_top">Alternation</a></td></tr> <tr><td><tt>?</tt></td><td><a href="optional.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>\?</tt></td><td><a href="optional.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>??</tt></td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>?+</tt></td><td><a href="possessive.html" target="_top">Possessive quantifier</a></td></tr> <tr><td><tt>*</tt></td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>*?</tt></td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>*+</tt></td><td><a href="possessive.html" target="_top">Possessive quantifier</a></td></tr> <tr><td><tt>+</tt></td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>\+</tt></td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>+?</tt></td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>++</tt></td><td><a href="possessive.html" target="_top">Possessive quantifier</a></td></tr> <tr><td><tt>{</tt> and <tt>}</tt></td><td><a href="characters.html" target="_top">Literal curly braces</a></td></tr> <tr><td><tt>{n}</tt> where n is an integer &gt;= 1</td><td><a href="repeat.html" target="_top">Fixed quantifier</a></td></tr> <tr><td><tt>{n,m}</tt> where n &gt;= 0 and m &gt;= n</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>{n,}</tt> where n &gt;= 0</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>{,m}</tt> where m &gt;= 1</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>\{n\}</tt> where n is an integer &gt;= 1</td><td><a href="repeat.html" target="_top">Fixed quantifier</a></td></tr> <tr><td><tt>\{n,m\}</tt> where n &gt;= 0 and m &gt;= n</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>\{n,\}</tt> where n &gt;= 0</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>\{,m\}</tt> where m &gt;= 1</td><td><a href="repeat.html" target="_top">Greedy quantifier</a></td></tr> <tr><td><tt>{n,m}?</tt> where n &gt;= 0 and m &gt;= n</td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>{n,}?</tt> where n &gt;= 0</td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>{,m}?</tt> where m &gt;= 1</td><td><a href="repeat.html#lazy">Lazy quantifier</a></td></tr> <tr><td><tt>{n,m}+</tt> where n &gt;= 0 and m &gt;= n</td><td><a href="possessive.html" target="_top">Possessive quantifier</a></td></tr> <tr><td><tt>{n,}+</tt> where n &gt;= 0</td><td><a href="possessive.html" target="_top">Possessive quantifier</a></td></tr> <tr><td><tt>^</tt></td><td><a href="anchors.html" target="_top">String anchor</a></td></tr> <tr><td><tt>^</tt></td><td><a href="anchors.html#multi">Line anchor</a></td></tr> <tr><td><tt>$</tt></td><td><a href="anchors.html" target="_top">String anchor</a></td></tr> <tr><td><tt>$</tt></td><td><a href="anchors.html#multi">Line anchor</a></td></tr> <tr><td><tt>\a</tt></td><td><a href="nonprint.html" target="_top">Character escape</a></td></tr> <tr><td><tt>\A</tt></td><td><a href="anchors.html#az">String anchor</a></td></tr> <tr><td><tt>\A</tt></td><td><a href="continue.html" target="_top">Attempt anchor</a></td></tr> <tr><td><tt>\b</tt></td><td><a href="wordboundaries.html" target="_top">Word boundary</a></td></tr> <tr><td><tt>\b</tt></td><td><a href="nonprint.html" target="_top">Backspace character</a></td></tr> <tr><td><tt>\B</tt></td><td><a href="wordboundaries.html" target="_top">Word non-boundary</a></td></tr> <tr><td><tt>\B</tt></td><td><a href="nonprint.html" target="_top">Backslash character</a></td></tr> <tr><td><tt>\c</tt></td><td><a href="shorthand.html#xml">XML shorthand</a></td></tr> <tr><td><tt>\ca</tt> through <tt>\cz</tt></td><td><a href="nonprint.html" target="_top">Control character escape</a></td></tr> <tr><td><tt>\cA</tt> through <tt>\cZ</tt></td><td><a href="nonprint.html" target="_top">Control character escape</a></td></tr> <tr><td><tt>\C</tt></td><td><a href="shorthand.html#xml">XML shorthand</a></td></tr> <tr><td><tt>\d</tt></td><td><a href="shorthand.html" target="_top">Digits shorthand</a></td></tr> <tr><td><tt>\D</tt></td><td><a href="shorthand.html" target="_top">Non-digits shorthand</a></td></tr> <tr><td><tt>\e</tt></td><td><a href="nonprint.html" target="_top">Escape character</a></td></tr> <tr><td><tt>\f</tt></td><td><a href="nonprint.html" target="_top">Form feed character</a></td></tr> <tr><td><tt>\g{name}</tt></td><td><a href="named.html" target="_top">Named backreference</a></td></tr> <tr><td><tt>\g-1</tt>, <tt>\g-2</tt>, etc.</td><td><a href="backrefrel.html" target="_top">Relative Backreference</a></td></tr> <tr><td><tt>\g{-1}</tt>, <tt>\g{-2}</tt>, etc.</td><td><a href="backrefrel.html" target="_top">Relative Backreference</a></td></tr> <tr><td><tt>\g1</tt> through <tt>\g99</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\g{1}</tt> through <tt>\g{99}</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\g&lt;name&gt;</tt> where “name” is the name of a capturing group</td><td><a href="subroutine.html" target="_top">Named subroutine call</a></td></tr> <tr><td><tt>\g&lt;name&gt;</tt> where “name” is the name of a capturing group</td><td><a href="named.html#boost">Named backreference</a></td></tr> <tr><td><tt>\g'name'</tt> where “name” is the name of a capturing group</td><td><a href="subroutine.html" target="_top">Named subroutine call</a></td></tr> <tr><td><tt>\g'name'</tt> where “name” is the name of a capturing group</td><td><a href="named.html#boost">Named backreference</a></td></tr> <tr><td><tt>\g&lt;0&gt;</tt></td><td><a href="recurse.html" target="_top">Recursion</a></td></tr> <tr><td><tt>\g'0'</tt></td><td><a href="subroutine.html" target="_top">Recursion</a></td></tr> <tr><td><tt>\g&lt;1&gt;</tt> where 1 is the number of a capturing group</td><td><a href="subroutine.html" target="_top">Subroutine call</a></td></tr> <tr><td><tt>\g&lt;1&gt;</tt> where 1 is the number of a capturing group</td><td><a href="named.html#boost">Backreference</a></td></tr> <tr><td><tt>\g'1'</tt> where 1 is the number of a capturing group</td><td><a href="subroutine.html" target="_top">Subroutine call</a></td></tr> <tr><td><tt>\g'1'</tt> where 1 is the number of a capturing group</td><td><a href="named.html#boost">Backreference</a></td></tr> <tr><td><tt>\g&lt;-1&gt;</tt> where -1 is a negative integer</td><td><a href="subroutine.html" target="_top">Relative subroutine call</a></td></tr> <tr><td><tt>\g&lt;-1&gt;</tt> where -1 is a negative integer</td><td><a href="backrefrel.html" target="_top">Relative backreference</a></td></tr> <tr><td><tt>\g'-1'</tt> where -1 is a negative integer</td><td><a href="subroutine.html" target="_top">Relative subroutine call</a></td></tr> <tr><td><tt>\g'-1'</tt> where -1 is a negative integer</td><td><a href="backrefrel.html" target="_top">Relative backreference</a></td></tr> <tr><td><tt>\g&lt;+1&gt;</tt> where +1 is a positive integer</td><td><a href="subroutine.html" target="_top">Forward subroutine call</a></td></tr> <tr><td><tt>\g'+1'</tt> where +1 is a positive integer</td><td><a href="subroutine.html" target="_top">Forward subroutine call</a></td></tr> <tr><td><tt>\G</tt></td><td><a href="continue.html" target="_top">Attempt anchor</a></td></tr> <tr><td><tt>\G</tt></td><td><a href="continue.html" target="_top">Match anchor</a></td></tr> <tr><td><tt>\h</tt></td><td><a href="shorthand.html#more">Hexadecimal digit shorthand</a></td></tr> <tr><td><tt>\h</tt></td><td><a href="shorthand.html#more">Horizontal whitespace shorthand</a></td></tr> <tr><td><tt>\H</tt></td><td><a href="shorthand.html#more">Non-hexadecimal digit shorthand</a></td></tr> <tr><td><tt>\H</tt></td><td><a href="shorthand.html#more">Non-horizontal whitespace shorthand</a></td></tr> <tr><td><tt>\i</tt></td><td><a href="shorthand.html#xml">XML shorthand</a></td></tr> <tr><td><tt>\I</tt></td><td><a href="shorthand.html#xml">XML shorthand</a></td></tr> <tr><td><tt>\k&lt;name&gt;</tt></td><td><a href="named.html" target="_top">Named backreference</a></td></tr> <tr><td><tt>\k'name'</tt> through <tt>\k'99'</tt></td><td><a href="named.html" target="_top">Named backreference</a></td></tr> <tr><td><tt>\k{name}</tt></td><td><a href="named.html" target="_top">Named backreference</a></td></tr> <tr><td><tt>\k&lt;1&gt;</tt> through <tt>\k&lt;99&gt;</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\k'1'</tt> through <tt>\k'99'</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\k&lt;-1&gt;</tt>, <tt>\k&lt;-2&gt;</tt>, etc.</td><td><a href="backrefrel.html" target="_top">Relative Backreference</a></td></tr> <tr><td><tt>\k'-1'</tt>, <tt>\k'-2'</tt>, etc.</td><td><a href="backrefrel.html" target="_top">Relative Backreference</a></td></tr> <tr><td><tt class="code">\K</tt></td><td><a href="keep.html" target="_top">Keep text out of the regex match</a></td></tr> <tr><td><tt>\l</tt></td><td><a href="shorthand.html#more">Lowercase shorthand</a></td></tr> <tr><td><tt>\L</tt></td><td><a href="shorthand.html#more">Non-lowercase shorthand</a></td></tr> <tr><td><tt>\m</tt></td><td><a href="wordboundaries.html#tcl">Tcl start of word boundary</a></td></tr> <tr><td><tt>\M</tt></td><td><a href="wordboundaries.html#tcl">Tcl end of word boundary</a></td></tr> <tr><td><tt>\n</tt></td><td><a href="nonprint.html" target="_top">Line feed character</a></td></tr> <tr><td><tt>\N</tt></td><td><a href="dot.html#n">Not a line break</a></td></tr> <tr><td>Literal CRLF, LF, or CR line break</td><td><a href="nonprint.html" target="_top">Line break</a></td></tr> <tr><td><tt>\o{7777}</tt> where 7777 is any octal number</td><td><a href="nonprint.html" target="_top">Octal escape</a></td></tr> <tr><td><tt>\pL</tt> where L is a <a href="unicode.html#category">Unicode category</a></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\PL</tt> where L is a <a href="unicode.html#category">Unicode category</a></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\p{L}</tt> where L is a <a href="unicode.html#category">Unicode category</a></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\p{IsL}</tt> where L is a <a href="unicode.html#category">Unicode category</a></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\p{Category}</tt></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\p{IsCategory}</tt></td><td><a href="unicode.html#category">Unicode category</a></td></tr> <tr><td><tt>\p{Script}</tt></td><td><a href="unicode.html#script">Unicode script</a></td></tr> <tr><td><tt>\p{IsScript}</tt></td><td><a href="unicode.html#script">Unicode script</a></td></tr> <tr><td><tt>\p{Block}</tt></td><td><a href="unicode.html#block">Unicode block</a></td></tr> <tr><td><tt>\p{InBlock}</tt></td><td><a href="unicode.html#block">Unicode block</a></td></tr> <tr><td><tt>\p{IsBlock}</tt></td><td><a href="unicode.html#block">Unicode block</a></td></tr> <tr><td><tt>\P{Property}</tt></td><td><a href="unicode.html" target="_top">Negated Unicode property</a></td></tr> <tr><td><tt>\p{^Property}</tt></td><td><a href="unicode.html" target="_top">Negated Unicode property</a></td></tr> <tr><td><tt>\P{^Property}</tt></td><td><a href="unicode.html" target="_top">Unicode property</a></td></tr> <tr><td><tt>\Q…\E</tt></td><td><a href="characters.html#special">Escape sequence</a></td></tr> <tr><td><tt>\r</tt></td><td><a href="nonprint.html" target="_top">Carriage return character</a></td></tr> <tr><td><tt>\R</tt></td><td><a href="nonprint.html" target="_top">Line break</a></td></tr> <tr><td><tt>\s</tt></td><td><a href="shorthand.html" target="_top">Whitespace shorthand</a></td></tr> <tr><td><tt>\S</tt></td><td><a href="shorthand.html" target="_top">Non-whitespace shorthand</a></td></tr> <tr><td><tt>\t</tt></td><td><a href="nonprint.html" target="_top">Tab character</a></td></tr> <tr><td><tt>\u</tt></td><td><a href="shorthand.html#more">Uppercase shorthand</a></td></tr> <tr><td><tt>\uFFFF</tt> where FFFF are 4 hexadecimal digits</td><td><a href="unicode.html#codepoint">Unicode code point</a></td></tr> <tr><td><tt>\u{FFFF}</tt> where FFFF are 1 to 4 hexadecimal digits</td><td><a href="unicode.html#codepoint">Unicode code point</a></td></tr> <tr><td><tt>\U</tt></td><td><a href="shorthand.html#more">Non-uppercase shorthand</a></td></tr> <tr><td><tt>\v</tt></td><td><a href="nonprint.html" target="_top">Vertical tab character</a></td></tr> <tr><td><tt>\v</tt></td><td><a href="shorthand.html#more">Vertical whitespace shorthand</a></td></tr> <tr><td><tt>\V</tt></td><td><a href="shorthand.html#more">Non-vertical whitespace shorthand</a></td></tr> <tr><td><tt>\w</tt></td><td><a href="shorthand.html" target="_top">Word character shorthand</a></td></tr> <tr><td><tt>\W</tt></td><td><a href="shorthand.html" target="_top">Non-word character shorthand</a></td></tr> <tr><td><tt>\xFF</tt> where FF are 2 hexadecimal digits </td><td><a href="nonprint.html" target="_top">Hexadecimal escape</a></td></tr> <tr><td><tt>\xFFFF</tt> where FFFF are 4 hexadecimal digits</td><td><a href="unicode.html#codepoint">Unicode code point</a></td></tr> <tr><td><tt>\x{FFFF}</tt> where FFFF are 1 to 4 hexadecimal digits</td><td><a href="unicode.html#codepoint">Unicode code point</a></td></tr> <tr><td><tt>\X</tt></td><td><a href="unicode.html#grapheme">Unicode grapheme</a></td></tr> <tr><td><tt>\y</tt></td><td><a href="wordboundaries.html#tcl">Tcl word boundary</a></td></tr> <tr><td><tt>\Y</tt></td><td><a href="wordboundaries.html#tcl">Tcl word non-boundary</a></td></tr> <tr><td><tt>\Z</tt></td><td><a href="anchors.html#az">String anchor</a></td></tr> <tr><td><tt>\z</tt></td><td><a href="anchors.html#az">String anchor</a></td></tr> <tr><td><tt>\0</tt></td><td><a href="nonprint.html" target="_top">NULL escape</a></td></tr> <tr><td><tt>\1</tt> through <tt>\7</tt></td><td><a href="nonprint.html" target="_top">Octal escape</a></td></tr> <tr><td><tt>\1</tt> through <tt>\9</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\10</tt> through <tt>\77</tt></td><td><a href="nonprint.html" target="_top">Octal escape</a></td></tr> <tr><td><tt>\10</tt> through <tt>\99</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>\100</tt> through <tt>\377</tt></td><td><a href="nonprint.html" target="_top">Octal escape</a></td></tr> <tr><td><tt>\01</tt> through <tt>\0377</tt></td><td><a href="nonprint.html" target="_top">Octal escape</a></td></tr> <tr><td><tt>\&lt;</tt></td><td><a href="anchors.html#gnu">String anchor</a></td></tr> <tr><td><tt>\&lt;</tt></td><td><a href="continue.html" target="_top">Attempt anchor</a></td></tr> <tr><td><tt>\'</tt></td><td><a href="anchors.html#gnu">String anchor</a></td></tr> <tr><td><tt>\&lt;</tt></td><td><a href="wordboundaries.html#gnu">GNU word boundary</a></td></tr> <tr><td><tt>\&gt;</tt></td><td><a href="wordboundaries.html#gnu">GNU word boundary</a></td></tr> <tr><td><tt>[[:&lt;:]]</tt></td><td><a href="wordboundaries.html#posix">POSIX word boundary</a></td></tr> <tr><td><tt>[[:&gt;:]]</tt></td><td><a href="wordboundaries.html#posix">POSIX word boundary</a></td></tr> <tr><td><tt>(regex)</tt></td><td><a href="brackets.html" target="_top">Capturing group</a></td></tr> <tr><td><tt>\(regex\)</tt></td><td><a href="brackets.html" target="_top">Capturing group</a></td></tr> <tr><td><tt>(?:regex)</tt></td><td><a href="brackets.html" target="_top">Non-capturing group</a></td></tr> <tr><td><tt>(?&lt;name&gt;regex)</tt></td><td><a href="named.html" target="_top">Named capturing group</a></td></tr> <tr><td><tt>(?'name'regex)</tt></td><td><a href="named.html" target="_top">Named capturing group</a></td></tr> <tr><td><tt class="code">(?#comment)</tt></td><td><a href="freespacing.html#parenscomment">Comment</a></td></tr> <tr><td><tt class="code">(?|regex)</tt></td><td><a href="branchreset.html" target="_top">Branch reset group</a></td></tr> <tr><td><tt class="code">(?&gt;regex)</tt></td><td><a href="atomic.html" target="_top">Atomic group</a></td></tr> <tr><td><tt class="code">(?=regex)</tt></td><td><a href="lookaround.html" target="_top">Positive lookahead</a></td></tr> <tr><td><tt class="code">(?!regex)</tt></td><td><a href="lookaround.html" target="_top">Negative lookahead</a></td></tr> <tr><td><tt class="code">(?&lt;=regex)</tt></td><td><a href="lookaround.html#lookbehind">Positive lookbehind</a></td></tr> <tr><td><tt class="code">(?&lt;!regex)</tt></td><td><a href="lookaround.html#lookbehind">Negative lookbehind</a></td></tr> <tr><td><tt class="code">(?(?=regex)then|else)</tt> where <tt class="code">(?=regex)</tt> is any valid lookaround and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Lookaround conditional</a></td></tr> <tr><td><tt class="code">(?(regex)then|else)</tt> where <tt>regex</tt>, <tt>then</tt>, and <tt>else</tt> are any valid regexes and <tt>regex</tt> is not the name of a capturing group</td><td><a href="conditional.html" target="_top">Implicit lookahead conditional</a></td></tr> <tr><td><tt class="code">(?(name)then|else)</tt> where <tt>name</tt> is the name of a capturing group and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Named conditional</a></td></tr> <tr><td><tt class="code">(?(&lt;name&gt;)then|else)</tt> where <tt>name</tt> is the name of a capturing group and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Named conditional</a></td></tr> <tr><td><tt class="code">(?('name')then|else)</tt> where <tt>name</tt> is the name of a capturing group and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Named conditional</a></td></tr> <tr><td><tt class="code">(?(1)then|else)</tt> where <tt>1</tt> is the number of a capturing group and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Conditional</a></td></tr> <tr><td><tt class="code">(?(-1)then|else)</tt> where <tt>-1</tt> is a negative integer and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Relative conditional</a></td></tr> <tr><td><tt class="code">(?(+1)then|else)</tt> where <tt>+1</tt> is a positive integer and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Forward conditional</a></td></tr> <tr><td><tt class="code">(?(+1)then|else)</tt> where <tt>1</tt> is the number of a capturing group and <tt>then</tt> and <tt>else</tt> are any valid regexes</td><td><a href="conditional.html" target="_top">Conditional</a></td></tr> <tr><td><tt class="code">(?&lt;capture-subtract&gt;regex)</tt> where “capture” and “subtract” are group names and “regex” is any regex</td><td><a href="balancing.html" target="_top">Balancing group</a></td></tr> <tr><td><tt class="code">(?'capture-subtract'regex)</tt> where “capture” and “subtract” are group names and “regex” is any regex</td><td><a href="balancing.html" target="_top">Balancing group</a></td></tr> <tr><td><tt>(?&amp;name)</tt> where “name” is the name of a capturing group</td><td><a href="subroutine.html" target="_top">Named subroutine call</a></td></tr> <tr><td><tt>(?(DEFINE)regex)</tt> where “regex” is any regex</td><td><a href="subroutine.html#define">Subroutine definitions</a></td></tr> <tr><td><tt>(?P&lt;name&gt;regex)</tt></td><td><a href="named.html" target="_top">Named capturing group</a></td></tr> <tr><td><tt>(?P=name)</tt></td><td><a href="named.html" target="_top">Named backreference</a></td></tr> <tr><td><tt>(?P=1)</tt> through <tt>(?P=99)</tt></td><td><a href="backref.html" target="_top">Backreference</a></td></tr> <tr><td><tt>(?P&gt;name)</tt> where “name” is the name of a capturing group</td><td><a href="subroutine.html" target="_top">Named subroutine call</a></td></tr> <tr><td><tt>(?R)</tt></td><td><a href="recurse.html" target="_top">Recursion</a></td></tr> <tr><td><tt>(?0)</tt></td><td><a href="recurse.html" target="_top">Recursion</a></td></tr> <tr><td><tt>(?1)</tt> where 1 is the number of a capturing group</td><td><a href="subroutine.html" target="_top">Subroutine call</a></td></tr> <tr><td><tt>(?-1)</tt> where -1 is a negative integer</td><td><a href="subroutine.html" target="_top">Relative subroutine call</a></td></tr> <tr><td><tt>(?+1)</tt> where +1 is a positive integer</td><td><a href="subroutine.html" target="_top">Forward subroutine call</a></td></tr> </tbody></table>
      
      </div>
    </tr>
  </div>
   <link rel="stylesheet" href="css/tutor.css">
</div>